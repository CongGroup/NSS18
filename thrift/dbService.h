/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef dbService_H
#define dbService_H

#include <thrift/TDispatchProcessor.h>
#include "dbService_types.h"

namespace DSSE {

class dbServiceIf {
 public:
  virtual ~dbServiceIf() {}
  virtual int32_t queryWord(const std::string& trapdoor, const std::string& key, const std::string& left) = 0;
  virtual void addWord(const std::string& key, const std::string& value) = 0;
  virtual void addWords(const std::vector<std::string> & keys, const std::vector<std::string> & values) = 0;
  virtual void deleteWord(const std::string& trapdoor, const std::string& delTrapdoor, const std::string& key) = 0;
  virtual void deleteWords(const std::vector<std::string> & trapdoors, const std::vector<std::string> & keys) = 0;
};

class dbServiceIfFactory {
 public:
  typedef dbServiceIf Handler;

  virtual ~dbServiceIfFactory() {}

  virtual dbServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(dbServiceIf* /* handler */) = 0;
};

class dbServiceIfSingletonFactory : virtual public dbServiceIfFactory {
 public:
  dbServiceIfSingletonFactory(const boost::shared_ptr<dbServiceIf>& iface) : iface_(iface) {}
  virtual ~dbServiceIfSingletonFactory() {}

  virtual dbServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(dbServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<dbServiceIf> iface_;
};

class dbServiceNull : virtual public dbServiceIf {
 public:
  virtual ~dbServiceNull() {}
  int32_t queryWord(const std::string& /* trapdoor */, const std::string& /* key */, const std::string& /* left */) {
    int32_t _return = 0;
    return _return;
  }
  void addWord(const std::string& /* key */, const std::string& /* value */) {
    return;
  }
  void addWords(const std::vector<std::string> & /* keys */, const std::vector<std::string> & /* values */) {
    return;
  }
  void deleteWord(const std::string& /* trapdoor */, const std::string& /* delTrapdoor */, const std::string& /* key */) {
    return;
  }
  void deleteWords(const std::vector<std::string> & /* trapdoors */, const std::vector<std::string> & /* keys */) {
    return;
  }
};

typedef struct _dbService_queryWord_args__isset {
  _dbService_queryWord_args__isset() : trapdoor(false), key(false), left(false) {}
  bool trapdoor :1;
  bool key :1;
  bool left :1;
} _dbService_queryWord_args__isset;

class dbService_queryWord_args {
 public:

  static const char* ascii_fingerprint; // = "AB879940BD15B6B25691265F7384B271";
  static const uint8_t binary_fingerprint[16]; // = {0xAB,0x87,0x99,0x40,0xBD,0x15,0xB6,0xB2,0x56,0x91,0x26,0x5F,0x73,0x84,0xB2,0x71};

  dbService_queryWord_args(const dbService_queryWord_args&);
  dbService_queryWord_args& operator=(const dbService_queryWord_args&);
  dbService_queryWord_args() : trapdoor(), key(), left() {
  }

  virtual ~dbService_queryWord_args() throw();
  std::string trapdoor;
  std::string key;
  std::string left;

  _dbService_queryWord_args__isset __isset;

  void __set_trapdoor(const std::string& val);

  void __set_key(const std::string& val);

  void __set_left(const std::string& val);

  bool operator == (const dbService_queryWord_args & rhs) const
  {
    if (!(trapdoor == rhs.trapdoor))
      return false;
    if (!(key == rhs.key))
      return false;
    if (!(left == rhs.left))
      return false;
    return true;
  }
  bool operator != (const dbService_queryWord_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const dbService_queryWord_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const dbService_queryWord_args& obj);
};


class dbService_queryWord_pargs {
 public:

  static const char* ascii_fingerprint; // = "AB879940BD15B6B25691265F7384B271";
  static const uint8_t binary_fingerprint[16]; // = {0xAB,0x87,0x99,0x40,0xBD,0x15,0xB6,0xB2,0x56,0x91,0x26,0x5F,0x73,0x84,0xB2,0x71};


  virtual ~dbService_queryWord_pargs() throw();
  const std::string* trapdoor;
  const std::string* key;
  const std::string* left;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const dbService_queryWord_pargs& obj);
};

typedef struct _dbService_queryWord_result__isset {
  _dbService_queryWord_result__isset() : success(false) {}
  bool success :1;
} _dbService_queryWord_result__isset;

class dbService_queryWord_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  dbService_queryWord_result(const dbService_queryWord_result&);
  dbService_queryWord_result& operator=(const dbService_queryWord_result&);
  dbService_queryWord_result() : success(0) {
  }

  virtual ~dbService_queryWord_result() throw();
  int32_t success;

  _dbService_queryWord_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const dbService_queryWord_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const dbService_queryWord_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const dbService_queryWord_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const dbService_queryWord_result& obj);
};

typedef struct _dbService_queryWord_presult__isset {
  _dbService_queryWord_presult__isset() : success(false) {}
  bool success :1;
} _dbService_queryWord_presult__isset;

class dbService_queryWord_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~dbService_queryWord_presult() throw();
  int32_t* success;

  _dbService_queryWord_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const dbService_queryWord_presult& obj);
};

typedef struct _dbService_addWord_args__isset {
  _dbService_addWord_args__isset() : key(false), value(false) {}
  bool key :1;
  bool value :1;
} _dbService_addWord_args__isset;

class dbService_addWord_args {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

  dbService_addWord_args(const dbService_addWord_args&);
  dbService_addWord_args& operator=(const dbService_addWord_args&);
  dbService_addWord_args() : key(), value() {
  }

  virtual ~dbService_addWord_args() throw();
  std::string key;
  std::string value;

  _dbService_addWord_args__isset __isset;

  void __set_key(const std::string& val);

  void __set_value(const std::string& val);

  bool operator == (const dbService_addWord_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const dbService_addWord_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const dbService_addWord_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const dbService_addWord_args& obj);
};


class dbService_addWord_pargs {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};


  virtual ~dbService_addWord_pargs() throw();
  const std::string* key;
  const std::string* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const dbService_addWord_pargs& obj);
};


class dbService_addWord_result {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  dbService_addWord_result(const dbService_addWord_result&);
  dbService_addWord_result& operator=(const dbService_addWord_result&);
  dbService_addWord_result() {
  }

  virtual ~dbService_addWord_result() throw();

  bool operator == (const dbService_addWord_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const dbService_addWord_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const dbService_addWord_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const dbService_addWord_result& obj);
};


class dbService_addWord_presult {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~dbService_addWord_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const dbService_addWord_presult& obj);
};

typedef struct _dbService_addWords_args__isset {
  _dbService_addWords_args__isset() : keys(false), values(false) {}
  bool keys :1;
  bool values :1;
} _dbService_addWords_args__isset;

class dbService_addWords_args {
 public:

  static const char* ascii_fingerprint; // = "AA819045335EAFAB5C2FE456B4B9CC1C";
  static const uint8_t binary_fingerprint[16]; // = {0xAA,0x81,0x90,0x45,0x33,0x5E,0xAF,0xAB,0x5C,0x2F,0xE4,0x56,0xB4,0xB9,0xCC,0x1C};

  dbService_addWords_args(const dbService_addWords_args&);
  dbService_addWords_args& operator=(const dbService_addWords_args&);
  dbService_addWords_args() {
  }

  virtual ~dbService_addWords_args() throw();
  std::vector<std::string>  keys;
  std::vector<std::string>  values;

  _dbService_addWords_args__isset __isset;

  void __set_keys(const std::vector<std::string> & val);

  void __set_values(const std::vector<std::string> & val);

  bool operator == (const dbService_addWords_args & rhs) const
  {
    if (!(keys == rhs.keys))
      return false;
    if (!(values == rhs.values))
      return false;
    return true;
  }
  bool operator != (const dbService_addWords_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const dbService_addWords_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const dbService_addWords_args& obj);
};


class dbService_addWords_pargs {
 public:

  static const char* ascii_fingerprint; // = "AA819045335EAFAB5C2FE456B4B9CC1C";
  static const uint8_t binary_fingerprint[16]; // = {0xAA,0x81,0x90,0x45,0x33,0x5E,0xAF,0xAB,0x5C,0x2F,0xE4,0x56,0xB4,0xB9,0xCC,0x1C};


  virtual ~dbService_addWords_pargs() throw();
  const std::vector<std::string> * keys;
  const std::vector<std::string> * values;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const dbService_addWords_pargs& obj);
};


class dbService_addWords_result {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  dbService_addWords_result(const dbService_addWords_result&);
  dbService_addWords_result& operator=(const dbService_addWords_result&);
  dbService_addWords_result() {
  }

  virtual ~dbService_addWords_result() throw();

  bool operator == (const dbService_addWords_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const dbService_addWords_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const dbService_addWords_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const dbService_addWords_result& obj);
};


class dbService_addWords_presult {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~dbService_addWords_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const dbService_addWords_presult& obj);
};

typedef struct _dbService_deleteWord_args__isset {
  _dbService_deleteWord_args__isset() : trapdoor(false), delTrapdoor(false), key(false) {}
  bool trapdoor :1;
  bool delTrapdoor :1;
  bool key :1;
} _dbService_deleteWord_args__isset;

class dbService_deleteWord_args {
 public:

  static const char* ascii_fingerprint; // = "AB879940BD15B6B25691265F7384B271";
  static const uint8_t binary_fingerprint[16]; // = {0xAB,0x87,0x99,0x40,0xBD,0x15,0xB6,0xB2,0x56,0x91,0x26,0x5F,0x73,0x84,0xB2,0x71};

  dbService_deleteWord_args(const dbService_deleteWord_args&);
  dbService_deleteWord_args& operator=(const dbService_deleteWord_args&);
  dbService_deleteWord_args() : trapdoor(), delTrapdoor(), key() {
  }

  virtual ~dbService_deleteWord_args() throw();
  std::string trapdoor;
  std::string delTrapdoor;
  std::string key;

  _dbService_deleteWord_args__isset __isset;

  void __set_trapdoor(const std::string& val);

  void __set_delTrapdoor(const std::string& val);

  void __set_key(const std::string& val);

  bool operator == (const dbService_deleteWord_args & rhs) const
  {
    if (!(trapdoor == rhs.trapdoor))
      return false;
    if (!(delTrapdoor == rhs.delTrapdoor))
      return false;
    if (!(key == rhs.key))
      return false;
    return true;
  }
  bool operator != (const dbService_deleteWord_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const dbService_deleteWord_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const dbService_deleteWord_args& obj);
};


class dbService_deleteWord_pargs {
 public:

  static const char* ascii_fingerprint; // = "AB879940BD15B6B25691265F7384B271";
  static const uint8_t binary_fingerprint[16]; // = {0xAB,0x87,0x99,0x40,0xBD,0x15,0xB6,0xB2,0x56,0x91,0x26,0x5F,0x73,0x84,0xB2,0x71};


  virtual ~dbService_deleteWord_pargs() throw();
  const std::string* trapdoor;
  const std::string* delTrapdoor;
  const std::string* key;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const dbService_deleteWord_pargs& obj);
};


class dbService_deleteWord_result {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  dbService_deleteWord_result(const dbService_deleteWord_result&);
  dbService_deleteWord_result& operator=(const dbService_deleteWord_result&);
  dbService_deleteWord_result() {
  }

  virtual ~dbService_deleteWord_result() throw();

  bool operator == (const dbService_deleteWord_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const dbService_deleteWord_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const dbService_deleteWord_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const dbService_deleteWord_result& obj);
};


class dbService_deleteWord_presult {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~dbService_deleteWord_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const dbService_deleteWord_presult& obj);
};

typedef struct _dbService_deleteWords_args__isset {
  _dbService_deleteWords_args__isset() : trapdoors(false), keys(false) {}
  bool trapdoors :1;
  bool keys :1;
} _dbService_deleteWords_args__isset;

class dbService_deleteWords_args {
 public:

  static const char* ascii_fingerprint; // = "AA819045335EAFAB5C2FE456B4B9CC1C";
  static const uint8_t binary_fingerprint[16]; // = {0xAA,0x81,0x90,0x45,0x33,0x5E,0xAF,0xAB,0x5C,0x2F,0xE4,0x56,0xB4,0xB9,0xCC,0x1C};

  dbService_deleteWords_args(const dbService_deleteWords_args&);
  dbService_deleteWords_args& operator=(const dbService_deleteWords_args&);
  dbService_deleteWords_args() {
  }

  virtual ~dbService_deleteWords_args() throw();
  std::vector<std::string>  trapdoors;
  std::vector<std::string>  keys;

  _dbService_deleteWords_args__isset __isset;

  void __set_trapdoors(const std::vector<std::string> & val);

  void __set_keys(const std::vector<std::string> & val);

  bool operator == (const dbService_deleteWords_args & rhs) const
  {
    if (!(trapdoors == rhs.trapdoors))
      return false;
    if (!(keys == rhs.keys))
      return false;
    return true;
  }
  bool operator != (const dbService_deleteWords_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const dbService_deleteWords_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const dbService_deleteWords_args& obj);
};


class dbService_deleteWords_pargs {
 public:

  static const char* ascii_fingerprint; // = "AA819045335EAFAB5C2FE456B4B9CC1C";
  static const uint8_t binary_fingerprint[16]; // = {0xAA,0x81,0x90,0x45,0x33,0x5E,0xAF,0xAB,0x5C,0x2F,0xE4,0x56,0xB4,0xB9,0xCC,0x1C};


  virtual ~dbService_deleteWords_pargs() throw();
  const std::vector<std::string> * trapdoors;
  const std::vector<std::string> * keys;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const dbService_deleteWords_pargs& obj);
};


class dbService_deleteWords_result {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  dbService_deleteWords_result(const dbService_deleteWords_result&);
  dbService_deleteWords_result& operator=(const dbService_deleteWords_result&);
  dbService_deleteWords_result() {
  }

  virtual ~dbService_deleteWords_result() throw();

  bool operator == (const dbService_deleteWords_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const dbService_deleteWords_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const dbService_deleteWords_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const dbService_deleteWords_result& obj);
};


class dbService_deleteWords_presult {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~dbService_deleteWords_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const dbService_deleteWords_presult& obj);
};

class dbServiceClient : virtual public dbServiceIf {
 public:
  dbServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  dbServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t queryWord(const std::string& trapdoor, const std::string& key, const std::string& left);
  void send_queryWord(const std::string& trapdoor, const std::string& key, const std::string& left);
  int32_t recv_queryWord();
  void addWord(const std::string& key, const std::string& value);
  void send_addWord(const std::string& key, const std::string& value);
  void recv_addWord();
  void addWords(const std::vector<std::string> & keys, const std::vector<std::string> & values);
  void send_addWords(const std::vector<std::string> & keys, const std::vector<std::string> & values);
  void recv_addWords();
  void deleteWord(const std::string& trapdoor, const std::string& delTrapdoor, const std::string& key);
  void send_deleteWord(const std::string& trapdoor, const std::string& delTrapdoor, const std::string& key);
  void recv_deleteWord();
  void deleteWords(const std::vector<std::string> & trapdoors, const std::vector<std::string> & keys);
  void send_deleteWords(const std::vector<std::string> & trapdoors, const std::vector<std::string> & keys);
  void recv_deleteWords();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class dbServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<dbServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (dbServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_queryWord(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addWord(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addWords(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deleteWord(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deleteWords(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  dbServiceProcessor(boost::shared_ptr<dbServiceIf> iface) :
    iface_(iface) {
    processMap_["queryWord"] = &dbServiceProcessor::process_queryWord;
    processMap_["addWord"] = &dbServiceProcessor::process_addWord;
    processMap_["addWords"] = &dbServiceProcessor::process_addWords;
    processMap_["deleteWord"] = &dbServiceProcessor::process_deleteWord;
    processMap_["deleteWords"] = &dbServiceProcessor::process_deleteWords;
  }

  virtual ~dbServiceProcessor() {}
};

class dbServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  dbServiceProcessorFactory(const ::boost::shared_ptr< dbServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< dbServiceIfFactory > handlerFactory_;
};

class dbServiceMultiface : virtual public dbServiceIf {
 public:
  dbServiceMultiface(std::vector<boost::shared_ptr<dbServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~dbServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<dbServiceIf> > ifaces_;
  dbServiceMultiface() {}
  void add(boost::shared_ptr<dbServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  int32_t queryWord(const std::string& trapdoor, const std::string& key, const std::string& left) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->queryWord(trapdoor, key, left);
    }
    return ifaces_[i]->queryWord(trapdoor, key, left);
  }

  void addWord(const std::string& key, const std::string& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addWord(key, value);
    }
    ifaces_[i]->addWord(key, value);
  }

  void addWords(const std::vector<std::string> & keys, const std::vector<std::string> & values) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addWords(keys, values);
    }
    ifaces_[i]->addWords(keys, values);
  }

  void deleteWord(const std::string& trapdoor, const std::string& delTrapdoor, const std::string& key) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deleteWord(trapdoor, delTrapdoor, key);
    }
    ifaces_[i]->deleteWord(trapdoor, delTrapdoor, key);
  }

  void deleteWords(const std::vector<std::string> & trapdoors, const std::vector<std::string> & keys) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deleteWords(trapdoors, keys);
    }
    ifaces_[i]->deleteWords(trapdoors, keys);
  }

};

} // namespace

#endif
